#include <iostream>
#include <cmath>
#include <vector>

// Funkcje matematyczne
double dodawanie(double a, double b) {
    return a + b;
}

double odejmowanie(double a, double b) {
    return a - b;
}

double mnozenie(double a, double b) {
    return a * b;
}

double dzielenie(double a, double b) {
    if (b != 0) {
        return a / b;
    } else {
        std::cout << "Nie można dzielić przez zero!" << std::endl;
        return 0;
    }
}

double potegowanie(double a, double b) {
    return std::pow(a, b);
}

double pierwiastkowanie(double a) {
    if (a >= 0) {
        return std::sqrt(a);
    } else {
        std::cout << "Nie można obliczyć pierwiastka z liczby ujemnej!" << std::endl;
        return 0;
    }
}

double sin(double a) {
    return std::sin(a);
}

double cos(double a) {
    return std::cos(a);
}

double tan(double a) {
    return std::tan(a);
}

double cotan(double a) {
    return 1 / std::tan(a);
}

double arcsin(double a) {
    return std::asin(a);
}

double arccos(double a) {
    return std::acos(a);
}

double arctan(double a) {
    return std::atan(a);
}

double arccotan(double a) {
    return std::atan(1 / a);
}

// Struktura reprezentująca macierz
struct Macierz {
    std::vector<std::vector<double>> macierz;
    int rozmiar;

    Macierz(const std::vector<std::vector<double>>& macierz) {
        this->macierz = macierz;
        this->rozmiar = macierz.size();
    }

    double obliczWyznacznik() {
        if (rozmiar == 1) {
            return macierz[0][0];
        } else if (rozmiar == 2) {
            return macierz[0][0] * macierz[1][1] - macierz[0][1] * macierz[1][0];
        } else {
            double wyznacznik = 0;
            int znak = 1;
            for (int k = 0; k < rozmiar; k++) {
                std::vector<std::vector<double>> podmacierz(rozmiar - 1, std::vector<double>(rozmiar - 1));
                for (int i = 1; i < rozmiar; i++) {
                    int j1 = 0;
                    for (int j = 0; j < rozmiar; j++) {
                        if (j == k)
                            continue;
                        podmacierz[i - 1][j1] = macierz[i][j];
                        j1++;
                    }
                }
                wyznacznik += znak * macierz[0][k] * Macierz(podmacierz).obliczWyznacznik();
                znak = -znak;
            }
            return wyznacznik;
        }
    }

    Macierz obliczOdwrotnosc() {
        double wyznacznik = obliczWyznacznik();
        if (wyznacznik == 0) {
            std::cout << "Macierz jest osobliwa, nie ma odwrotności." << std::endl;
            return *this;
        } else {
            std::vector<std::vector<double>> macierzOdwrotna(rozmiar, std::vector<double>(rozmiar));
            int znak = 1;
            for (int i = 0; i < rozmiar; i++) {
                for (int j = 0; j < rozmiar; j++) {
                    std::vector<std::vector<double>> podmacierz(rozmiar - 1, std::vector<double>(rozmiar - 1));
                    int i1 = 0;
                    for (int k = 0; k < rozmiar; k++) {
                        if (k == i)
                            continue;
                        int j1 = 0;
                        for (int l = 0; l < rozmiar; l++) {
                            if (l == j)
                                continue;
                            podmacierz[i1][j1] = macierz[k][l];
                            j1++;
                        }
                        i1++;
                    }
                    macierzOdwrotna[j][i] = znak * Macierz(podmacierz).obliczWyznacznik() / wyznacznik;
                    znak = -znak;
                }
            }
            return Macierz(macierzOdwrotna);
        }
    }

    Macierz operator+(const Macierz& other) {
        if (rozmiar != other.rozmiar) {
            std::cout << "Nie można dodać macierzy o różnych rozmiarach!" << std::endl;
            return *this;
        } else {
            std::vector<std::vector<double>> wynik(rozmiar, std::vector<double>(rozmiar));
            for (int i = 0; i < rozmiar; i++) {
                for (int j = 0; j < rozmiar; j++) {
                    wynik[i][j] = macierz[i][j] + other.macierz[i][j];
                }
            }
            return Macierz(wynik);
        }
    }

    Macierz operator-(const Macierz& other) {
        if (rozmiar != other.rozmiar) {
            std::cout << "Nie można odjąć macierzy o różnych rozmiarach!" << std::endl;
            return *this;
        } else {
            std::vector<std::vector<double>> wynik(rozmiar, std::vector<double>(rozmiar));
            for (int i = 0; i < rozmiar; i++) {
                for (int j = 0; j < rozmiar; j++) {
                    wynik[i][j] = macierz[i][j] - other.macierz[i][j];
                }
            }
            return Macierz(wynik);
        }
    }
};

int main() {
    double a, b;
    int wybor;
    std::cout << "Podaj dwie liczby: ";
    std::cin >> a >> b;

    std::cout << "Wybierz operację do wykonania:" << std::endl;
    std::cout << "1. Dodawanie" << std::endl;
    std::cout << "2. Odejmowanie" << std::endl;
    std::cout << "3. Mnozenie" << std::endl;
    std::cout << "4. Dzielenie" << std::endl;
    std::cout << "5. Potegowanie" << std::endl;
    std::cout << "6. Pierwiastkowanie" << std::endl;
    std::cout << "7. Sinus" << std::endl;
    std::cout << "8. Cosinus" << std::endl;
    std::cout << "9. Tangens" << std::endl;
    std::cout << "10. Cotangens" << std::endl;
    std::cout << "11. Arcus sinus" << std::endl;
    std::cout << "12. Arcus cosinus" << std::endl;
    std::cout << "13. Arcus tangens" << std::endl;
    std::cout << "14. Arcus cotangens" << std::endl;
    std::cout << "15. Obliczanie wyznacznika macierzy" << std::endl;
    std::cout << "16. Obliczanie odwrotnosci macierzy" << std::endl;
    std::cout << "17. Dodawanie macierzy" << std::endl;
    std::cout << "18. Odejmowanie macierzy" << std::endl;

    std::cin >> wybor;

    switch (wybor) {
        case 1:
            std::cout << "Dodawanie: " << dodawanie(a, b) << std::endl;
            break;
        case 2:
            std::cout << "Odejmowanie: " << odejmowanie(a, b) << std::endl;
            break;
        case 3:
            std::cout << "Mnożenie: " << mnozenie(a, b) << std::endl;
            break;
        case 4:
            std::cout << "Dzielenie: " << dzielenie(a, b) << std::endl;
            break;
        case 5:
            std::cout << "Potęgowanie: " << potegowanie(a, b) << std::endl;
            break;
        case 6:
            std::cout << "Pierwiastkowanie: " << pierwiastkowanie(a) << std::endl;
            break;
        case 7:
            std::cout << "Sin(a): " << sin(a) << std::endl;
            break;
        case 8:
            std::cout << "Cos(a): " << cos(a) << std::endl;
            break;
        case 9:
            std::cout << "Tan(a): " << tan(a) << std::endl;
            break;
        case 10:
            std::cout << "Cotan(a): " << cotan(a) << std::endl;
            break;
        case 11:
            std::cout << "Arcsin(a): " << arcsin(a) << std::endl;
            break;
        case 12:
            std::cout << "Arccos(a): " << arccos(a) << std::endl;
            break;
        case 13:
            std::cout << "Arctan(a): " << arctan(a) << std::endl;
            break;
        case 14:
            std::cout << "Arccotan(a): " << arccotan(a) << std::endl;
            break;
        case 15: {
            int rozmiar;
            std::cout << "Podaj rozmiar macierzy: ";
            std::cin >> rozmiar;
            std::vector<std::vector<double>> macierz(rozmiar, std::vector<double>(rozmiar));
            std::cout << "Podaj elementy macierzy: " << std::endl;
            for (int i = 0; i < rozmiar; i++) {
                for (int j = 0; j < rozmiar; j++) {
                    std::cin >> macierz[i][j];
                }
            }
            Macierz m(macierz);
            std::cout << "Wyznacznik macierzy: " << m.obliczWyznacznik() << std::endl;
            break;
        }
        case 16: {
            int rozmiar;
            std::cout << "Podaj rozmiar macierzy: ";
            std::cin >> rozmiar;
            std::vector<std::vector<double>> macierz(rozmiar, std::vector<double>(rozmiar));
            std::cout << "Podaj elementy macierzy: " << std::endl;
            for (int i = 0; i < rozmiar; i++) {
                for (int j = 0; j < rozmiar; j++) {
                    std::cin >> macierz[i][j];
                }
            }
            Macierz m(macierz);
            Macierz odwrotna = m.obliczOdwrotnosc();
            std::cout << "Macierz odwrotna: " << std::endl;
            for (int i = 0; i < rozmiar; i++) {
                for (int j = 0; j < rozmiar; j++) {
                    std::cout << odwrotna.macierz[i][j] << " ";
                }
                std::cout << std::endl;
            }
            break;
        }
        case 17: {
            int rozmiar;
            std::cout << "Podaj rozmiar macierzy: ";
            std::cin >> rozmiar;
            std::vector<std::vector<double>> macierz1(rozmiar, std::vector<double>(rozmiar));
            std::cout << "Podaj elementy pierwszej macierzy: " << std::endl;
            for (int i = 0; i < rozmiar; i++) {
                for (int j = 0; j < rozmiar; j++) {
                    std::cin >> macierz1[i][j];
                }
            }
            std::vector<std::vector<double>> macierz2(rozmiar, std::vector<double>(rozmiar));
            std::cout << "Podaj elementy drugiej macierzy: " << std::endl;
            for (int i = 0; i < rozmiar; i++) {
                for (int j = 0; j < rozmiar; j++) {
                    std::cin >> macierz2[i][j];
                }
            }
            Macierz m1(macierz1);
            Macierz m2(macierz2);
            Macierz suma = m1 + m2;
            std::cout << "Suma macierzy: " << std::endl;
            for (int i = 0; i < rozmiar; i++) {
                for (int j = 0; j < rozmiar; j++) {
                    std::cout << suma.macierz[i][j] << " ";
                }
                std::cout << std::endl;
            }
            break;
        }
        case 18: {
            int rozmiar;
            std::cout << "Podaj rozmiar macierzy: ";
            std::cin >> rozmiar;
            std::vector<std::vector<double>> macierz1(rozmiar, std::vector<double>(rozmiar));
            std::cout << "Podaj elementy pierwszej macierzy: " << std::endl;
            for (int i = 0; i < rozmiar; i++) {
                for (int j = 0; j < rozmiar; j++) {
                    std::cin >> macierz1[i][j];
                }
            }
            std::vector<std::vector<double>> macierz2(rozmiar, std::vector<double>(rozmiar));
            std::cout << "Podaj elementy drugiej macierzy: " << std::endl;
            for (int i = 0; i < rozmiar; i++) {
                for (int j = 0; j < rozmiar; j++) {
                    std::cin >> macierz2[i][j];
                }
            }
            Macierz m1(macierz1);
            Macierz m2(macierz2);
            Macierz roznica = m1 - m2;
            std::cout << "Różnica macierzy: " << std::endl;
            for (int i = 0; i < rozmiar; i++) {
                for (int j = 0; j < rozmiar; j++) {
                    std::cout << roznica.macierz[i][j] << " ";
                }
                std::cout << std::endl;
            }
            break;
        }
        default:
            std::cout << "Nieprawidłowy wybór operacji!" << std::endl;
            break;
    }

    return 0;
}
